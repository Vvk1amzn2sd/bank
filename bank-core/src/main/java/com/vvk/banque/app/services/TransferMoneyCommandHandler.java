package com.vvk.banque.app.services;

import com.vvk.banque.app.ports.in.TransferMoneyCommand;
import com.vvk.banque.app.ports.out.AccountEventStorePort;
import com.vvk.banque.app.ports.out.EventPublisherPort;
import com.vvk.banque.domain.AggregatesObj.Account;
import com.vvk.banque.domain.ValueObj.AccountId;
import com.vvk.banque.domain.ValueObj.Money;
import com.vvk.banque.domain.events.DomainEvent; // Added for iterating uncommitted events

// Removed imports for MoneyTransferSend/Receive

public class TransferMoneyCommandHandler implements TransferMoneyCommand {

    private final AccountEventStorePort eventStore;
    private final EventPublisherPort eventPublisher;

    public TransferMoneyCommandHandler(AccountEventStorePort eventStore
                                    , EventPublisherPort eventPublisher) {
        this.eventStore = eventStore;
        this.eventPublisher = eventPublisher;
    }

    @Override
    public void executeTransferMoney(AccountId fromAccountId,
                                 AccountId toAccountId,
                                 Money     amount) {
                                 
        /*--- 1. HYDRATE AGGREGATE (ONLY THE SENDER) ---*/
        Account fromAccount = eventStore.loadAccount(fromAccountId);
        
        /*--- 2. MUTATE (DOMIAN LOGIC) ---*/
        // The domain logic is contained within the aggregate's 'send' method,
        // which validates the transfer and records a single MoneyTransferInitiated event.
        fromAccount.send(toAccountId, amount); 

        /*--- 3. PERSIST & PUBLISH UNCOMMITTED EVENTS (MoneyTransferInitiated) ---*/
        // We save the single event generated by the Aggregate (MoneyTransferInitiated)
        for (DomainEvent event : fromAccount.getUncommittedEvents()) {
            eventStore.saveEvent(event);
            eventPublisher.publish(event);
        }
        fromAccount.markEventsAsCommitted(); 
        
        // The receiving account update must happen asynchronously by an event listener 
        // that consumes the published MoneyTransferInitiated event.
    }
}
